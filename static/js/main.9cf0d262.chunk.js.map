{"version":3,"sources":["components/AddTodo.js","components/FilterSelector.js","components/TodosList.js","constants/input.constants.js","constants/todo.constants.js","actions/input.actions.js","actions/todo.actions.js","components/App.js","reducers/input.reducers.js","reducers/todo.reducers.js","reducers/index.js","index.js"],"names":["AddTodo","type","gutter","onChange","this","props","getInputValue","placeholder","onClick","addTodo","React","Component","FilterSelector","filter","Group","defaultValue","value","TodosList","isCompleted","completed","renderTodo","item","id","text","className","toggleTodo","data","dataSource","renderItem","inputConstants","todoConstants","GET_INPUT_VALUE","ADD_TODO","TOGGLE_TODO","SELECT_FILTER","counter","event","payload","target","dispatch","getState","inputReducer","inputValue","todos","todoReducer","map","todo","selectFilter","App","filterTodos","title","connect","state","initialState","combineReducers","action","store","createStore","reducers","applyMiddleware","reduxThunk","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.9cf0d262.chunk.js","sourcesContent":["import React from \"react\";\nimport { Row, Col, Input, Button } from \"antd\";\n\nclass AddTodo extends React.Component {\n    render() {\n        return (\n            <Row type=\"flex\" gutter={[8, 8]}>\n                <Col>\n                    <Input onChange={this.props.getInputValue} placeholder=\"Type here\" />\n                </Col>\n                <Col>\n                    <Button onClick={this.props.addTodo}>Add</Button>\n                </Col>\n            </Row>\n        );\n    };\n};\n\nexport default AddTodo;","import React from \"react\";\nimport { Radio } from \"antd\";\n\nclass FilterSelector extends React.Component {\n    render() {\n        const { filter, onChange } = this.props\n        return (\n            <Radio.Group defaultValue={filter} onChange={onChange}>\n                <Radio value=\"all\">All</Radio>\n                <Radio value=\"active\">Active</Radio>\n                <Radio value=\"completed\">Completed</Radio>\n            </Radio.Group>\n        );\n    };\n};\n\nexport default FilterSelector;","import React from \"react\";\nimport { Row, Col, List, Card, Icon } from \"antd\";\n\nclass TodosList extends React.Component {\n\n    isCompleted = (completed) => {\n        return completed ? \"completed\" : null;\n    };\n\n    renderTodo = (item) => {\n        const { id, text, completed } = item;\n        return (\n            <Col>\n                <Card>\n                    <Row className={this.isCompleted(completed)} type=\"flex\" gutter={[8, 8]}>\n                        <Col>\n                            <Icon\n                                onClick={() => this.props.toggleTodo(id)}\n                                className={this.isCompleted(completed)}\n                                type=\"check\"\n                            />\n                        </Col>\n                        <Col>\n                            #{id}\n                        </Col>\n                        <Col>\n                            {text}\n                        </Col>\n                    </Row>\n                </Card>\n            </Col>\n        );\n    };\n\n    render() {\n        const { data } = this.props;\n\n        return (\n            <Row gutter={[8, 8]}>\n                <List\n                    dataSource={data}\n                    renderItem={this.renderTodo}\n                />\n            </Row>\n        );\n    };\n};\n\nexport default TodosList;","export const inputConstants = {\n    GET_INPUT_VALUE: \"GET_INPUT_VALUE\"\n};","export const todoConstants = {\n    ADD_TODO: \"ADD_TODO\",\n    TOGGLE_TODO: \"TOGGLE_TODO\",\n    SELECT_FILTER: \"SELECT_FILTER\"\n};","import { inputConstants } from \"../constants\";\n\nconst { GET_INPUT_VALUE } = inputConstants;\n\nconst getInputValue = (event) => {\n    return {\n        type: GET_INPUT_VALUE,\n        payload: event.target.value\n    };\n};\n\nexport const inputActions = {\n    getInputValue\n};","import { todoConstants } from \"../constants\";\n\nconst {\n    ADD_TODO,\n    TOGGLE_TODO,\n    SELECT_FILTER\n} = todoConstants;\n\nlet counter = 0;\n\nconst addTodo = () => (dispatch, getState) => {\n    dispatch({\n        type: ADD_TODO,\n        payload: {\n            id: counter++,\n            text: getState().inputReducer.inputValue,\n            completed: false\n        }\n    });\n};\n\nconst toggleTodo = (id) => (dispatch, getState) => {\n    const todos = getState().todoReducer.todos.map(todo => {\n        if (todo.id === id) {\n            todo.completed = !todo.completed;\n        };\n\n        return todo;\n    });\n\n    dispatch({\n        type: TOGGLE_TODO,\n        payload: todos\n    });\n};\n\nconst selectFilter = (event) => {\n    return {\n        type: SELECT_FILTER,\n        payload: event.target.value\n    };\n};\n\nexport const todoActions = {\n    addTodo,\n    toggleTodo,\n    selectFilter\n};","import React from \"react\";\nimport { Row, Col, Card } from \"antd\";\nimport { connect } from \"react-redux\";\n\nimport AddTodo from \"./AddTodo\";\nimport FilterSelector from \"./FilterSelector\";\nimport TodosList from \"./TodosList\";\nimport { inputActions, todoActions } from \"../actions\";\n\nconst { getInputValue } = inputActions;\nconst { addTodo, toggleTodo, selectFilter } = todoActions;\n\nclass App extends React.Component {\n\n    filterTodos = (todos, filter) => {\n        switch (filter) {\n            case \"all\":\n                return todos;\n            case \"active\":\n                return todos.filter(todo => !todo.completed);\n            case \"completed\":\n                return todos.filter(todo => todo.completed);\n            default:\n                return todos;\n        };\n    };\n\n    render() {\n        return (\n            <Card\n                title={\n                    <Row gutter={[8, 8]}>\n                        <Col>\n                            <AddTodo\n                                getInputValue={this.props.getInputValue}\n                                addTodo={this.props.addTodo}\n                            />\n                        </Col>\n                        <Col>\n                            <FilterSelector\n                                filter={this.props.todoReducer.filter}\n                                onChange={this.props.selectFilter}\n                            />\n                        </Col>\n                    </Row>\n                }\n            >\n                <TodosList\n                    toggleTodo={this.props.toggleTodo}\n                    data={this.filterTodos(this.props.todoReducer.todos, this.props.todoReducer.filter)}\n                />\n            </Card>\n        );\n    };\n};\n\nconst mapStateToProps = (state) => {\n    return state;\n};\n\nexport default connect(mapStateToProps, {\n    getInputValue,\n    addTodo,\n    toggleTodo,\n    selectFilter\n})(App);","import { inputConstants } from \"../constants\";\n\nconst { GET_INPUT_VALUE } = inputConstants;\n\nconst initialState = {\n    inputValue: \"\"\n};\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case GET_INPUT_VALUE:\n            return { ...state, inputValue: action.payload };\n        default:\n            return state;\n    };\n};","import { todoConstants } from \"../constants\";\n\nconst {\n    ADD_TODO,\n    TOGGLE_TODO,\n    SELECT_FILTER\n} = todoConstants;\n\nconst initialState = {\n    todos: [],\n    filter: \"all\"\n};\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case ADD_TODO:\n            return { ...state, todos: [...state.todos, action.payload] };\n        case TOGGLE_TODO:\n            return { ...state, todos: action.payload };\n        case SELECT_FILTER:\n            return { ...state, filter: action.payload };\n        default:\n            return state;\n    };\n};","import { combineReducers } from \"redux\";\n\nimport inputReducer from \"./input.reducers\";\nimport todoReducer from \"./todo.reducers\";\n\nexport default combineReducers({\n    inputReducer,\n    todoReducer\n});","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport reduxThunk from \"redux-thunk\";\n\nimport App from \"./components/App\";\nimport reducers from \"./reducers\";\nimport \"./index.css\";\n\nconst store = createStore(reducers, applyMiddleware(reduxThunk));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.querySelector(\"#root\")\n);"],"sourceRoot":""}